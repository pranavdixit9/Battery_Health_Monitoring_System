
Rx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004464  08004464  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800446c  0800446c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800446c  0800446c  0001446c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000025c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a151  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a05  00000000  00000000  0002a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000830  00000000  00000000  0002bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000640  00000000  00000000  0002c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020866  00000000  00000000  0002ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a49f  00000000  00000000  0004d2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c50c3  00000000  00000000  0005779d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000261c  00000000  00000000  0011c860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0011ee7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043e0 	.word	0x080043e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080043e0 	.word	0x080043e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:
char receivedRPM[3];




void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // blue
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800058c:	f001 fd08 	bl	8001fa0 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000594:	2100      	movs	r1, #0
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000598:	f000 fe5a 	bl	8001250 <HAL_CAN_GetRxMessage>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	20000148 	.word	0x20000148
 80005ac:	2000012c 	.word	0x2000012c
 80005b0:	20000078 	.word	0x20000078

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fb93 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f86d 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f97d 	bl	80008c0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005c6:	f000 f8d3 	bl	8000770 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f94f 	bl	800086c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005ce:	f000 f923 	bl	8000818 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80005d2:	4829      	ldr	r0, [pc, #164]	; (8000678 <main+0xc4>)
 80005d4:	f000 fdf8 	bl	80011c8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005d8:	2102      	movs	r1, #2
 80005da:	4827      	ldr	r0, [pc, #156]	; (8000678 <main+0xc4>)
 80005dc:	f000 ff4a 	bl	8001474 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  HAL_UART_Receive(&huart1, &rpm, sizeof(rpm), HAL_MAX_DELAY);
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	2201      	movs	r2, #1
 80005e6:	4925      	ldr	r1, [pc, #148]	; (800067c <main+0xc8>)
 80005e8:	4825      	ldr	r0, [pc, #148]	; (8000680 <main+0xcc>)
 80005ea:	f002 fa6a 	bl	8002ac2 <HAL_UART_Receive>
	  	  //UART_ReceiveString((uint8_t *)receivedRPM, 3);
	  if(RxData[0] != 0){
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <main+0xd0>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d005      	beq.n	8000602 <main+0x4e>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fc:	4822      	ldr	r0, [pc, #136]	; (8000688 <main+0xd4>)
 80005fe:	f001 fccf 	bl	8001fa0 <HAL_GPIO_WritePin>
//	  		for(i = 0; i < RxHeader.DLC; ++i)
//	  		{
//	  			UARTsend[i] = RxData[i];
//	  		}

	  		memset(UARTsend, 0, sizeof(UARTsend));
 8000602:	2215      	movs	r2, #21
 8000604:	2100      	movs	r1, #0
 8000606:	4821      	ldr	r0, [pc, #132]	; (800068c <main+0xd8>)
 8000608:	f003 fa66 	bl	8003ad8 <memset>
//	  		 for (i = 0; i < 4; i++) {
//	  			 if (i > 0) {  // Add comma after the first element
//				  //strcat(UARTsend, ",");
//				  }
//				  snprintf(UARTsend + strlen(UARTsend), sizeof(UARTsend) - strlen(UARTsend), "%03d", RxData[i]);
	  			snprintf(UARTsend, sizeof(UARTsend), "%03d,%03d,%03d,%03d,%03d,#", RxData[0], RxData[1], RxData[2], RxData[3], rpm);
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <main+0xd0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461c      	mov	r4, r3
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <main+0xd0>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	461a      	mov	r2, r3
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <main+0xd0>)
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	4619      	mov	r1, r3
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <main+0xd0>)
 8000620:	78db      	ldrb	r3, [r3, #3]
 8000622:	4618      	mov	r0, r3
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <main+0xc8>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	9303      	str	r3, [sp, #12]
 800062a:	9002      	str	r0, [sp, #8]
 800062c:	9101      	str	r1, [sp, #4]
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	4623      	mov	r3, r4
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <main+0xdc>)
 8000634:	2115      	movs	r1, #21
 8000636:	4815      	ldr	r0, [pc, #84]	; (800068c <main+0xd8>)
 8000638:	f003 fa1a 	bl	8003a70 <sniprintf>
//				  strcat(UARTsend, ",");
//				  strcat(UARTsend, receivedRPM);
				 // strcat(UARTsend, ",");

			  // Add the delimiter at the end (modify "#" as needed)
			  strcat(UARTsend, "#");
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <main+0xd8>)
 800063e:	f7ff fdc7 	bl	80001d0 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <main+0xd8>)
 8000648:	4413      	add	r3, r2
 800064a:	4912      	ldr	r1, [pc, #72]	; (8000694 <main+0xe0>)
 800064c:	461a      	mov	r2, r3
 800064e:	460b      	mov	r3, r1
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	8013      	strh	r3, [r2, #0]



	  		HAL_UART_Transmit(&huart2, (uint8_t *)UARTsend, sizeof(UARTsend), HAL_MAX_DELAY);
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2215      	movs	r2, #21
 800065a:	490c      	ldr	r1, [pc, #48]	; (800068c <main+0xd8>)
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <main+0xe4>)
 800065e:	f002 f99e 	bl	800299e <HAL_UART_Transmit>

	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <main+0xd4>)
 800066a:	f001 fc99 	bl	8001fa0 <HAL_GPIO_WritePin>

	  		HAL_Delay(500);
 800066e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000672:	f000 fba9 	bl	8000dc8 <HAL_Delay>
	  	  HAL_UART_Receive(&huart1, &rpm, sizeof(rpm), HAL_MAX_DELAY);
 8000676:	e7b3      	b.n	80005e0 <main+0x2c>
 8000678:	20000078 	.word	0x20000078
 800067c:	20000128 	.word	0x20000128
 8000680:	200000a0 	.word	0x200000a0
 8000684:	20000148 	.word	0x20000148
 8000688:	40020c00 	.word	0x40020c00
 800068c:	20000150 	.word	0x20000150
 8000690:	080043f8 	.word	0x080043f8
 8000694:	08004414 	.word	0x08004414
 8000698:	200000e4 	.word	0x200000e4

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fa14 	bl	8003ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	; (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000710:	2348      	movs	r3, #72	; 0x48
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fc57 	bl	8001fd4 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 f928 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f001 feb8 	bl	80024c4 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 f911 	bl	8000980 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_CAN1_Init+0xa0>)
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <MX_CAN1_Init+0xa4>)
 800077a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_CAN1_Init+0xa0>)
 800077e:	2212      	movs	r2, #18
 8000780:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_CAN1_Init+0xa0>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_CAN1_Init+0xa0>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_CAN1_Init+0xa0>)
 8000790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000794:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_CAN1_Init+0xa0>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_CAN1_Init+0xa0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_CAN1_Init+0xa0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_CAN1_Init+0xa0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_CAN1_Init+0xa0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_CAN1_Init+0xa0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_CAN1_Init+0xa0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <MX_CAN1_Init+0xa0>)
 80007c2:	f000 fb25 	bl	8000e10 <HAL_CAN_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007cc:	f000 f8d8 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
  canFilterConfig.SlaveStartFilterBank=14;
 80007d4:	230e      	movs	r3, #14
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  canFilterConfig.FilterBank=2;
 80007d8:	2302      	movs	r3, #2
 80007da:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterMaskIdLow=0x0000;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh=0xFF00;
 80007ec:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007f0:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow=0x0000;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterIdHigh=0x1500;
 80007f6:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80007fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_CAN1_Init+0xa0>)
 8000802:	f000 fc01 	bl	8001008 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000078 	.word	0x20000078
 8000814:	40006400 	.word	0x40006400

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART1_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000850:	f002 f858 	bl	8002904 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f891 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000a0 	.word	0x200000a0
 8000868:	40011000 	.word	0x40011000

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f002 f82e 	bl	8002904 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f867 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000e4 	.word	0x200000e4
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_GPIO_Init+0xb8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a26      	ldr	r2, [pc, #152]	; (8000978 <MX_GPIO_Init+0xb8>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_GPIO_Init+0xb8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_GPIO_Init+0xb8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <MX_GPIO_Init+0xb8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_GPIO_Init+0xb8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_GPIO_Init+0xb8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <MX_GPIO_Init+0xb8>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_GPIO_Init+0xb8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_GPIO_Init+0xb8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <MX_GPIO_Init+0xb8>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_GPIO_Init+0xb8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <MX_GPIO_Init+0xbc>)
 800094e:	f001 fb27 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000952:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0xbc>)
 800096c:	f001 f97c 	bl	8001c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020c00 	.word	0x40020c00

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ca:	2007      	movs	r0, #7
 80009cc:	f001 f878 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <HAL_CAN_MspInit+0x94>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d134      	bne.n	8000a68 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_CAN_MspInit+0x98>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <HAL_CAN_MspInit+0x98>)
 8000a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_CAN_MspInit+0x98>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_CAN_MspInit+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <HAL_CAN_MspInit+0x98>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_CAN_MspInit+0x98>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a48:	2309      	movs	r3, #9
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <HAL_CAN_MspInit+0x9c>)
 8000a54:	f001 f908 	bl	8001c68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2014      	movs	r0, #20
 8000a5e:	f001 f83a 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a62:	2014      	movs	r0, #20
 8000a64:	f001 f853 	bl	8001b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40006400 	.word	0x40006400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a36      	ldr	r2, [pc, #216]	; (8000b74 <HAL_UART_MspInit+0xf8>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d135      	bne.n	8000b0a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a2d      	ldr	r2, [pc, #180]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4822      	ldr	r0, [pc, #136]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000af4:	f001 f8b8 	bl	8001c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2025      	movs	r0, #37	; 0x25
 8000afe:	f000 ffea 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b02:	2025      	movs	r0, #37	; 0x25
 8000b04:	f001 f803 	bl	8001b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b08:	e030      	b.n	8000b6c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <HAL_UART_MspInit+0x104>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d12b      	bne.n	8000b6c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000b68:	f001 f87e 	bl	8001c68 <HAL_GPIO_Init>
}
 8000b6c:	bf00      	nop
 8000b6e:	3730      	adds	r7, #48	; 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40011000 	.word	0x40011000
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40004400 	.word	0x40004400

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f000 f8da 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <CAN1_RX0_IRQHandler+0x10>)
 8000bde:	f000 fc6f 	bl	80014c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000078 	.word	0x20000078

08000bec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <USART1_IRQHandler+0x10>)
 8000bf2:	f002 f809 	bl	8002c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000a0 	.word	0x200000a0

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 ff5a 	bl	8003ae8 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20020000 	.word	0x20020000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	20000168 	.word	0x20000168
 8000c68:	200002b8 	.word	0x200002b8

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cba:	f7ff ffd7 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 ff19 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc77 	bl	80005b4 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cd4:	08004474 	.word	0x08004474
  ldr r2, =_sbss
 8000cd8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cdc:	200002b8 	.word	0x200002b8

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 fed7 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fe38 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 feef 	bl	8001b2a <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 feb7 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	2000016c 	.word	0x2000016c

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	2000016c 	.word	0x2000016c

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e0ed      	b.n	8000ffe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fdd4 	bl	80009dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0201 	orr.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e44:	f7ff ffb4 	bl	8000db0 <HAL_GetTick>
 8000e48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e4a:	e012      	b.n	8000e72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e4c:	f7ff ffb0 	bl	8000db0 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	d90b      	bls.n	8000e72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2205      	movs	r2, #5
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0c5      	b.n	8000ffe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0e5      	beq.n	8000e4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0202 	bic.w	r2, r2, #2
 8000e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e90:	f7ff ff8e 	bl	8000db0 <HAL_GetTick>
 8000e94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e96:	e012      	b.n	8000ebe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e98:	f7ff ff8a 	bl	8000db0 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d90b      	bls.n	8000ebe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e09f      	b.n	8000ffe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e5      	bne.n	8000e98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7e1b      	ldrb	r3, [r3, #24]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d108      	bne.n	8000ee6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e007      	b.n	8000ef6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7e5b      	ldrb	r3, [r3, #25]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d108      	bne.n	8000f10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e007      	b.n	8000f20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7e9b      	ldrb	r3, [r3, #26]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d108      	bne.n	8000f3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0220 	orr.w	r2, r2, #32
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e007      	b.n	8000f4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0220 	bic.w	r2, r2, #32
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7edb      	ldrb	r3, [r3, #27]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d108      	bne.n	8000f64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0210 	bic.w	r2, r2, #16
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0210 	orr.w	r2, r2, #16
 8000f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7f1b      	ldrb	r3, [r3, #28]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d108      	bne.n	8000f8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0208 	orr.w	r2, r2, #8
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e007      	b.n	8000f9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0208 	bic.w	r2, r2, #8
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7f5b      	ldrb	r3, [r3, #29]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0204 	orr.w	r2, r2, #4
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0204 	bic.w	r2, r2, #4
 8000fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	ea42 0103 	orr.w	r1, r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001020:	7cfb      	ldrb	r3, [r7, #19]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d003      	beq.n	800102e <HAL_CAN_ConfigFilter+0x26>
 8001026:	7cfb      	ldrb	r3, [r7, #19]
 8001028:	2b02      	cmp	r3, #2
 800102a:	f040 80be 	bne.w	80011aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800102e:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001030:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001038:	f043 0201 	orr.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001048:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	431a      	orrs	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	2201      	movs	r2, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d123      	bne.n	80010d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3248      	adds	r2, #72	; 0x48
 80010b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	3348      	adds	r3, #72	; 0x48
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d122      	bne.n	8001126 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001100:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3248      	adds	r2, #72	; 0x48
 8001106:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800111a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800111c:	6979      	ldr	r1, [r7, #20]
 800111e:	3348      	adds	r3, #72	; 0x48
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d109      	bne.n	8001142 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	401a      	ands	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001140:	e007      	b.n	8001152 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	431a      	orrs	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	401a      	ands	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800116c:	e007      	b.n	800117e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	431a      	orrs	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	431a      	orrs	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800119c:	f023 0201 	bic.w	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e006      	b.n	80011b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
  }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40006400 	.word	0x40006400

080011c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d12e      	bne.n	800123a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff fddc 	bl	8000db0 <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011fa:	e012      	b.n	8001222 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011fc:	f7ff fdd8 	bl	8000db0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b0a      	cmp	r3, #10
 8001208:	d90b      	bls.n	8001222 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2205      	movs	r2, #5
 800121a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e012      	b.n	8001248 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e5      	bne.n	80011fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e006      	b.n	8001248 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
  }
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001264:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d003      	beq.n	8001274 <HAL_CAN_GetRxMessage+0x24>
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b02      	cmp	r3, #2
 8001270:	f040 80f3 	bne.w	800145a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10e      	bne.n	8001298 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d116      	bne.n	80012b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0e7      	b.n	8001468 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d107      	bne.n	80012b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0d8      	b.n	8001468 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	331b      	adds	r3, #27
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0204 	and.w	r2, r3, #4
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10c      	bne.n	80012ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	331b      	adds	r3, #27
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	0d5b      	lsrs	r3, r3, #21
 80012e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e00b      	b.n	8001306 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	331b      	adds	r3, #27
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	331b      	adds	r3, #27
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0202 	and.w	r2, r3, #2
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	331b      	adds	r3, #27
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	3304      	adds	r3, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 020f 	and.w	r2, r3, #15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	331b      	adds	r3, #27
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4413      	add	r3, r2
 8001340:	3304      	adds	r3, #4
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	b2da      	uxtb	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	331b      	adds	r3, #27
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	3304      	adds	r3, #4
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0c1b      	lsrs	r3, r3, #16
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	0a1a      	lsrs	r2, r3, #8
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	4413      	add	r3, r2
 800139e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0c1a      	lsrs	r2, r3, #16
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	3302      	adds	r3, #2
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0e1a      	lsrs	r2, r3, #24
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	3303      	adds	r3, #3
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3304      	adds	r3, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0a1a      	lsrs	r2, r3, #8
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3305      	adds	r3, #5
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0c1a      	lsrs	r2, r3, #16
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	3306      	adds	r3, #6
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0e1a      	lsrs	r2, r3, #24
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	3307      	adds	r3, #7
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d108      	bne.n	8001446 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0220 	orr.w	r2, r2, #32
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	e007      	b.n	8001456 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e006      	b.n	8001468 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
  }
}
 8001468:	4618      	mov	r0, r3
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001484:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d002      	beq.n	8001492 <HAL_CAN_ActivateNotification+0x1e>
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d109      	bne.n	80014a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6959      	ldr	r1, [r3, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e006      	b.n	80014b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
  }
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d07c      	beq.n	8001600 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f983 	bl	800182e <HAL_CAN_TxMailbox0CompleteCallback>
 8001528:	e016      	b.n	8001558 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	e00c      	b.n	8001558 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
 8001550:	e002      	b.n	8001558 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f989 	bl	800186a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d024      	beq.n	80015ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f963 	bl	8001842 <HAL_CAN_TxMailbox1CompleteCallback>
 800157c:	e016      	b.n	80015ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
 8001590:	e00c      	b.n	80015ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
 80015a4:	e002      	b.n	80015ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f969 	bl	800187e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d024      	beq.n	8001600 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f943 	bl	8001856 <HAL_CAN_TxMailbox2CompleteCallback>
 80015d0:	e016      	b.n	8001600 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
 80015e4:	e00c      	b.n	8001600 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
 80015f8:	e002      	b.n	8001600 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f949 	bl	8001892 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2210      	movs	r2, #16
 8001622:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2208      	movs	r2, #8
 800163e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f930 	bl	80018a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7fe ff8c 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00c      	beq.n	8001688 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2210      	movs	r2, #16
 8001686:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2208      	movs	r2, #8
 80016a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f912 	bl	80018ce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8f9 	bl	80018ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2210      	movs	r2, #16
 80016e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8fc 	bl	80018e2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2208      	movs	r2, #8
 8001704:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f8f5 	bl	80018f6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d07b      	beq.n	800180e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d072      	beq.n	8001806 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001742:	2b00      	cmp	r3, #0
 8001744:	d008      	beq.n	8001758 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177a:	2b00      	cmp	r3, #0
 800177c:	d043      	beq.n	8001806 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001784:	2b00      	cmp	r3, #0
 8001786:	d03e      	beq.n	8001806 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800178e:	2b60      	cmp	r3, #96	; 0x60
 8001790:	d02b      	beq.n	80017ea <HAL_CAN_IRQHandler+0x32a>
 8001792:	2b60      	cmp	r3, #96	; 0x60
 8001794:	d82e      	bhi.n	80017f4 <HAL_CAN_IRQHandler+0x334>
 8001796:	2b50      	cmp	r3, #80	; 0x50
 8001798:	d022      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x320>
 800179a:	2b50      	cmp	r3, #80	; 0x50
 800179c:	d82a      	bhi.n	80017f4 <HAL_CAN_IRQHandler+0x334>
 800179e:	2b40      	cmp	r3, #64	; 0x40
 80017a0:	d019      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x316>
 80017a2:	2b40      	cmp	r3, #64	; 0x40
 80017a4:	d826      	bhi.n	80017f4 <HAL_CAN_IRQHandler+0x334>
 80017a6:	2b30      	cmp	r3, #48	; 0x30
 80017a8:	d010      	beq.n	80017cc <HAL_CAN_IRQHandler+0x30c>
 80017aa:	2b30      	cmp	r3, #48	; 0x30
 80017ac:	d822      	bhi.n	80017f4 <HAL_CAN_IRQHandler+0x334>
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d002      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x2f8>
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	d005      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017b6:	e01d      	b.n	80017f4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c0:	e019      	b.n	80017f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017ca:	e014      	b.n	80017f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d4:	e00f      	b.n	80017f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017de:	e00a      	b.n	80017f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e8:	e005      	b.n	80017f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f2:	e000      	b.n	80017f6 <HAL_CAN_IRQHandler+0x336>
            break;
 80017f4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001804:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2204      	movs	r2, #4
 800180c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f872 	bl	800190a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	; 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff3e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff8e 	bl	8001a14 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff31 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffa2 	bl	8001a7c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff f92e 	bl	8000db0 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d008      	beq.n	8001b74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2280      	movs	r2, #128	; 0x80
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e052      	b.n	8001c1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0216 	bic.w	r2, r2, #22
 8001b82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d103      	bne.n	8001ba4 <HAL_DMA_Abort+0x62>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0208 	bic.w	r2, r2, #8
 8001bb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc4:	e013      	b.n	8001bee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc6:	f7ff f8f3 	bl	8000db0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d90c      	bls.n	8001bee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e015      	b.n	8001c1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e4      	bne.n	8001bc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	223f      	movs	r2, #63	; 0x3f
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e00c      	b.n	8001c5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2205      	movs	r2, #5
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e16b      	b.n	8001f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 815a 	bne.w	8001f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d017      	beq.n	8001d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80b4 	beq.w	8001f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b60      	ldr	r3, [pc, #384]	; (8001f74 <HAL_GPIO_Init+0x30c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a5f      	ldr	r2, [pc, #380]	; (8001f74 <HAL_GPIO_Init+0x30c>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <HAL_GPIO_Init+0x30c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0a:	4a5b      	ldr	r2, [pc, #364]	; (8001f78 <HAL_GPIO_Init+0x310>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_GPIO_Init+0x314>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02b      	beq.n	8001e8e <HAL_GPIO_Init+0x226>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_GPIO_Init+0x318>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d025      	beq.n	8001e8a <HAL_GPIO_Init+0x222>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a50      	ldr	r2, [pc, #320]	; (8001f84 <HAL_GPIO_Init+0x31c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01f      	beq.n	8001e86 <HAL_GPIO_Init+0x21e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4f      	ldr	r2, [pc, #316]	; (8001f88 <HAL_GPIO_Init+0x320>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d019      	beq.n	8001e82 <HAL_GPIO_Init+0x21a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4e      	ldr	r2, [pc, #312]	; (8001f8c <HAL_GPIO_Init+0x324>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_GPIO_Init+0x216>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4d      	ldr	r2, [pc, #308]	; (8001f90 <HAL_GPIO_Init+0x328>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00d      	beq.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_GPIO_Init+0x32c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <HAL_GPIO_Init+0x20e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4b      	ldr	r2, [pc, #300]	; (8001f98 <HAL_GPIO_Init+0x330>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_GPIO_Init+0x20a>
 8001e6e:	2307      	movs	r3, #7
 8001e70:	e00e      	b.n	8001e90 <HAL_GPIO_Init+0x228>
 8001e72:	2308      	movs	r3, #8
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_Init+0x228>
 8001e76:	2306      	movs	r3, #6
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_Init+0x228>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_Init+0x228>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x228>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x228>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x228>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x228>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea0:	4935      	ldr	r1, [pc, #212]	; (8001f78 <HAL_GPIO_Init+0x310>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a32      	ldr	r2, [pc, #200]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	f67f ae90 	bls.w	8001c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40021c00 	.word	0x40021c00
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e267      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d075      	beq.n	80020de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff2:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d00c      	beq.n	8002018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffe:	4b85      	ldr	r3, [pc, #532]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	2b08      	cmp	r3, #8
 8002008:	d112      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4b82      	ldr	r3, [pc, #520]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002016:	d10b      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	4b7e      	ldr	r3, [pc, #504]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d05b      	beq.n	80020dc <HAL_RCC_OscConfig+0x108>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d157      	bne.n	80020dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e242      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x74>
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a75      	ldr	r2, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6f      	ldr	r2, [pc, #444]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6c      	ldr	r2, [pc, #432]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 800206c:	4b69      	ldr	r3, [pc, #420]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a68      	ldr	r2, [pc, #416]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a65      	ldr	r2, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe fe90 	bl	8000db0 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe fe8c 	bl	8000db0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e207      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b5b      	ldr	r3, [pc, #364]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xc0>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe fe7c 	bl	8000db0 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7fe fe78 	bl	8000db0 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1f3      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b51      	ldr	r3, [pc, #324]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0xe8>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c7      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4937      	ldr	r1, [pc, #220]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x244>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7fe fe31 	bl	8000db0 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002152:	f7fe fe2d 	bl	8000db0 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a8      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4925      	ldr	r1, [pc, #148]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_OscConfig+0x244>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fe10 	bl	8000db0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002194:	f7fe fe0c 	bl	8000db0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e187      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d036      	beq.n	800222c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCC_OscConfig+0x248>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe fdf0 	bl	8000db0 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d4:	f7fe fdec 	bl	8000db0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e167      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80021e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x200>
 80021f2:	e01b      	b.n	800222c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_OscConfig+0x248>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fdd9 	bl	8000db0 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	e00e      	b.n	8002220 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002202:	f7fe fdd5 	bl	8000db0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d907      	bls.n	8002220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e150      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
 8002214:	40023800 	.word	0x40023800
 8002218:	42470000 	.word	0x42470000
 800221c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b88      	ldr	r3, [pc, #544]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ea      	bne.n	8002202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8097 	beq.w	8002368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b81      	ldr	r3, [pc, #516]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b7a      	ldr	r3, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b77      	ldr	r3, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b74      	ldr	r3, [pc, #464]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a73      	ldr	r2, [pc, #460]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe fd95 	bl	8000db0 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7fe fd91 	bl	8000db0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e10c      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x2ea>
 80022b0:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a63      	ldr	r2, [pc, #396]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	e01c      	b.n	80022f8 <HAL_RCC_OscConfig+0x324>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x30c>
 80022c6:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6713      	str	r3, [r2, #112]	; 0x70
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a5b      	ldr	r2, [pc, #364]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0x324>
 80022e0:	4b58      	ldr	r3, [pc, #352]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a57      	ldr	r2, [pc, #348]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	4b55      	ldr	r3, [pc, #340]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a54      	ldr	r2, [pc, #336]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f023 0304 	bic.w	r3, r3, #4
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d015      	beq.n	800232c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7fe fd56 	bl	8000db0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	e00a      	b.n	800231e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002308:	f7fe fd52 	bl	8000db0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0cb      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0ee      	beq.n	8002308 <HAL_RCC_OscConfig+0x334>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7fe fd40 	bl	8000db0 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fd3c 	bl	8000db0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0b5      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ee      	bne.n	8002334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235c:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	4a38      	ldr	r2, [pc, #224]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a1 	beq.w	80024b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002372:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d05c      	beq.n	8002438 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d141      	bne.n	800240a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0x478>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fd10 	bl	8000db0 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fd0c 	bl	8000db0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e087      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	3b01      	subs	r3, #1
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	491b      	ldr	r1, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x478>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7fe fce5 	bl	8000db0 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ea:	f7fe fce1 	bl	8000db0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e05c      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x416>
 8002408:	e054      	b.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x478>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fcce 	bl	8000db0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fcca 	bl	8000db0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e045      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x444>
 8002436:	e03d      	b.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e038      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
 8002444:	40023800 	.word	0x40023800
 8002448:	40007000 	.word	0x40007000
 800244c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d028      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d121      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d11a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002480:	4013      	ands	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	3b01      	subs	r3, #1
 800249a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0cc      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d044      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e067      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7fe fbfc 	bl	8000db0 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe fbf8 	bl	8000db0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20c      	bcs.n	800260c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fb5c 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	08004418 	.word	0x08004418
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002694:	b094      	sub	sp, #80	; 0x50
 8002696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	647b      	str	r3, [r7, #68]	; 0x44
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	2300      	movs	r3, #0
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d00d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x40>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f200 80e1 	bhi.w	800287c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x3a>
 80026c2:	e0db      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026c8:	e0db      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b73      	ldr	r3, [pc, #460]	; (8002898 <HAL_RCC_GetSysClockFreq+0x208>)
 80026cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ce:	e0d8      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	2200      	movs	r2, #0
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 80026fa:	2300      	movs	r3, #0
 80026fc:	637b      	str	r3, [r7, #52]	; 0x34
 80026fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002702:	4622      	mov	r2, r4
 8002704:	462b      	mov	r3, r5
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	0159      	lsls	r1, r3, #5
 8002710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002714:	0150      	lsls	r0, r2, #5
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4621      	mov	r1, r4
 800271c:	1a51      	subs	r1, r2, r1
 800271e:	6139      	str	r1, [r7, #16]
 8002720:	4629      	mov	r1, r5
 8002722:	eb63 0301 	sbc.w	r3, r3, r1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002734:	4659      	mov	r1, fp
 8002736:	018b      	lsls	r3, r1, #6
 8002738:	4651      	mov	r1, sl
 800273a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800273e:	4651      	mov	r1, sl
 8002740:	018a      	lsls	r2, r1, #6
 8002742:	4651      	mov	r1, sl
 8002744:	ebb2 0801 	subs.w	r8, r2, r1
 8002748:	4659      	mov	r1, fp
 800274a:	eb63 0901 	sbc.w	r9, r3, r1
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800275a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002762:	4690      	mov	r8, r2
 8002764:	4699      	mov	r9, r3
 8002766:	4623      	mov	r3, r4
 8002768:	eb18 0303 	adds.w	r3, r8, r3
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	462b      	mov	r3, r5
 8002770:	eb49 0303 	adc.w	r3, r9, r3
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002782:	4629      	mov	r1, r5
 8002784:	024b      	lsls	r3, r1, #9
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800278c:	4621      	mov	r1, r4
 800278e:	024a      	lsls	r2, r1, #9
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002796:	2200      	movs	r2, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800279c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a0:	f7fd fd6e 	bl	8000280 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	e058      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	2200      	movs	r2, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	4611      	mov	r1, r2
 80027ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c8:	4642      	mov	r2, r8
 80027ca:	464b      	mov	r3, r9
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	0159      	lsls	r1, r3, #5
 80027d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027da:	0150      	lsls	r0, r2, #5
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4641      	mov	r1, r8
 80027e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027e6:	4649      	mov	r1, r9
 80027e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002800:	ebb2 040a 	subs.w	r4, r2, sl
 8002804:	eb63 050b 	sbc.w	r5, r3, fp
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	00eb      	lsls	r3, r5, #3
 8002812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002816:	00e2      	lsls	r2, r4, #3
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
 800281c:	4643      	mov	r3, r8
 800281e:	18e3      	adds	r3, r4, r3
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	464b      	mov	r3, r9
 8002824:	eb45 0303 	adc.w	r3, r5, r3
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002836:	4629      	mov	r1, r5
 8002838:	028b      	lsls	r3, r1, #10
 800283a:	4621      	mov	r1, r4
 800283c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002840:	4621      	mov	r1, r4
 8002842:	028a      	lsls	r2, r1, #10
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	61fa      	str	r2, [r7, #28]
 8002850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002854:	f7fd fd14 	bl	8000280 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287a:	e002      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002884:	4618      	mov	r0, r3
 8002886:	3750      	adds	r7, #80	; 0x50
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	08004428 	.word	0x08004428

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffdc 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	08004428 	.word	0x08004428

08002904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e03f      	b.n	8002996 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe f8a6 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2224      	movs	r2, #36	; 0x24
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fe1d 	bl	8003588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800295c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800296c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800297c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b08a      	sub	sp, #40	; 0x28
 80029a2:	af02      	add	r7, sp, #8
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d17c      	bne.n	8002ab8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_UART_Transmit+0x2c>
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e075      	b.n	8002aba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_UART_Transmit+0x3e>
 80029d8:	2302      	movs	r3, #2
 80029da:	e06e      	b.n	8002aba <HAL_UART_Transmit+0x11c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2221      	movs	r2, #33	; 0x21
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f2:	f7fe f9dd 	bl	8000db0 <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0c:	d108      	bne.n	8002a20 <HAL_UART_Transmit+0x82>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e003      	b.n	8002a28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a30:	e02a      	b.n	8002a88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fb9b 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e036      	b.n	8002aba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10b      	bne.n	8002a6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3302      	adds	r3, #2
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	e007      	b.n	8002a7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	781a      	ldrb	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3301      	adds	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1cf      	bne.n	8002a32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2140      	movs	r1, #64	; 0x40
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fb6b 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e006      	b.n	8002aba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b08a      	sub	sp, #40	; 0x28
 8002ac6:	af02      	add	r7, sp, #8
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	f040 808c 	bne.w	8002bfc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_UART_Receive+0x2e>
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e084      	b.n	8002bfe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Receive+0x40>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e07d      	b.n	8002bfe <HAL_UART_Receive+0x13c>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2222      	movs	r2, #34	; 0x22
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b1e:	f7fe f947 	bl	8000db0 <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b38:	d108      	bne.n	8002b4c <HAL_UART_Receive+0x8a>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	e003      	b.n	8002b54 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b5c:	e043      	b.n	8002be6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2120      	movs	r1, #32
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fb05 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e042      	b.n	8002bfe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10c      	bne.n	8002b98 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	3302      	adds	r3, #2
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e01f      	b.n	8002bd8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba0:	d007      	beq.n	8002bb2 <HAL_UART_Receive+0xf0>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_UART_Receive+0xfe>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e008      	b.n	8002bd2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1b6      	bne.n	8002b5e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b0ba      	sub	sp, #232	; 0xe8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10f      	bne.n	8002c6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_UART_IRQHandler+0x66>
 8002c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fbd3 	bl	8003412 <UART_Receive_IT>
      return;
 8002c6c:	e256      	b.n	800311c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80de 	beq.w	8002e34 <HAL_UART_IRQHandler+0x22c>
 8002c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80d1 	beq.w	8002e34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xae>
 8002c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_UART_IRQHandler+0xd2>
 8002cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_UART_IRQHandler+0xf6>
 8002ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0204 	orr.w	r2, r3, #4
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d011      	beq.n	8002d2e <HAL_UART_IRQHandler+0x126>
 8002d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0208 	orr.w	r2, r3, #8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 81ed 	beq.w	8003112 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_UART_IRQHandler+0x14e>
 8002d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fb5e 	bl	8003412 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_UART_IRQHandler+0x17a>
 8002d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d04f      	beq.n	8002e22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa66 	bl	8003254 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d92:	2b40      	cmp	r3, #64	; 0x40
 8002d94:	d141      	bne.n	8002e1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3314      	adds	r3, #20
 8002dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1d9      	bne.n	8002d96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d013      	beq.n	8002e12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	4a7d      	ldr	r2, [pc, #500]	; (8002fe4 <HAL_UART_IRQHandler+0x3dc>)
 8002df0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe ff13 	bl	8001c22 <HAL_DMA_Abort_IT>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e00e      	b.n	8002e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f99a 	bl	800314c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e18:	e00a      	b.n	8002e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f996 	bl	800314c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	e006      	b.n	8002e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f992 	bl	800314c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e2e:	e170      	b.n	8003112 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	bf00      	nop
    return;
 8002e32:	e16e      	b.n	8003112 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	f040 814a 	bne.w	80030d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8143 	beq.w	80030d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 813c 	beq.w	80030d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	f040 80b4 	bne.w	8002fe8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8140 	beq.w	8003116 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	f080 8139 	bcs.w	8003116 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eaa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	f000 8088 	beq.w	8002fca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ee6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1d9      	bne.n	8002eba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e1      	bne.n	8002f06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3314      	adds	r3, #20
 8002f48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3314      	adds	r3, #20
 8002f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e3      	bne.n	8002f42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f9a:	f023 0310 	bic.w	r3, r3, #16
 8002f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fac:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e3      	bne.n	8002f88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fdbc 	bl	8001b42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8c0 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fe0:	e099      	b.n	8003116 <HAL_UART_IRQHandler+0x50e>
 8002fe2:	bf00      	nop
 8002fe4:	0800331b 	.word	0x0800331b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 808b 	beq.w	800311a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8086 	beq.w	800311a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003024:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003032:	647a      	str	r2, [r7, #68]	; 0x44
 8003034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e3      	bne.n	800300e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3314      	adds	r3, #20
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	623b      	str	r3, [r7, #32]
   return(result);
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3314      	adds	r3, #20
 8003066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800306a:	633a      	str	r2, [r7, #48]	; 0x30
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003072:	e841 2300 	strex	r3, r2, [r1]
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1e3      	bne.n	8003046 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	60fb      	str	r3, [r7, #12]
   return(result);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0310 	bic.w	r3, r3, #16
 80030a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030b0:	61fa      	str	r2, [r7, #28]
 80030b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	69b9      	ldr	r1, [r7, #24]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	617b      	str	r3, [r7, #20]
   return(result);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e3      	bne.n	800308c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f848 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030d0:	e023      	b.n	800311a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_UART_IRQHandler+0x4ea>
 80030de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f929 	bl	8003342 <UART_Transmit_IT>
    return;
 80030f0:	e014      	b.n	800311c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00e      	beq.n	800311c <HAL_UART_IRQHandler+0x514>
 80030fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f969 	bl	80033e2 <UART_EndTransmit_IT>
    return;
 8003110:	e004      	b.n	800311c <HAL_UART_IRQHandler+0x514>
    return;
 8003112:	bf00      	nop
 8003114:	e002      	b.n	800311c <HAL_UART_IRQHandler+0x514>
      return;
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <HAL_UART_IRQHandler+0x514>
      return;
 800311a:	bf00      	nop
  }
}
 800311c:	37e8      	adds	r7, #232	; 0xe8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop

08003124 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b090      	sub	sp, #64	; 0x40
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003188:	e050      	b.n	800322c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d04c      	beq.n	800322c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003198:	f7fd fe0a 	bl	8000db0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d241      	bcs.n	800322c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c8:	637a      	str	r2, [r7, #52]	; 0x34
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e5      	bne.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3314      	adds	r3, #20
 80031e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	613b      	str	r3, [r7, #16]
   return(result);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031fc:	623a      	str	r2, [r7, #32]
 80031fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	69f9      	ldr	r1, [r7, #28]
 8003202:	6a3a      	ldr	r2, [r7, #32]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	61bb      	str	r3, [r7, #24]
   return(result);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e00f      	b.n	800324c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	429a      	cmp	r2, r3
 8003248:	d09f      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3740      	adds	r7, #64	; 0x40
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b095      	sub	sp, #84	; 0x54
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800327c:	643a      	str	r2, [r7, #64]	; 0x40
 800327e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3314      	adds	r3, #20
 8003296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	61fb      	str	r3, [r7, #28]
   return(result);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e5      	bne.n	8003290 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d119      	bne.n	8003300 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	e853 3f00 	ldrex	r3, [r3]
 80032da:	60bb      	str	r3, [r7, #8]
   return(result);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f023 0310 	bic.w	r3, r3, #16
 80032e2:	647b      	str	r3, [r7, #68]	; 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ec:	61ba      	str	r2, [r7, #24]
 80032ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6979      	ldr	r1, [r7, #20]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	613b      	str	r3, [r7, #16]
   return(result);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e5      	bne.n	80032cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800330e:	bf00      	nop
 8003310:	3754      	adds	r7, #84	; 0x54
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff ff09 	bl	800314c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b21      	cmp	r3, #33	; 0x21
 8003354:	d13e      	bne.n	80033d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d114      	bne.n	800338a <UART_Transmit_IT+0x48>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d110      	bne.n	800338a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800337c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	1c9a      	adds	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	621a      	str	r2, [r3, #32]
 8003388:	e008      	b.n	800339c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6211      	str	r1, [r2, #32]
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4619      	mov	r1, r3
 80033aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10f      	bne.n	80033d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e000      	b.n	80033d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fe8e 	bl	8003124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b08c      	sub	sp, #48	; 0x30
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b22      	cmp	r3, #34	; 0x22
 8003424:	f040 80ab 	bne.w	800357e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003430:	d117      	bne.n	8003462 <UART_Receive_IT+0x50>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d113      	bne.n	8003462 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800343a:	2300      	movs	r3, #0
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003450:	b29a      	uxth	r2, r3
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	1c9a      	adds	r2, r3, #2
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
 8003460:	e026      	b.n	80034b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003474:	d007      	beq.n	8003486 <UART_Receive_IT+0x74>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <UART_Receive_IT+0x82>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e008      	b.n	80034a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4619      	mov	r1, r3
 80034be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d15a      	bne.n	800357a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0220 	bic.w	r2, r2, #32
 80034d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	2b01      	cmp	r3, #1
 8003502:	d135      	bne.n	8003570 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	613b      	str	r3, [r7, #16]
   return(result);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f023 0310 	bic.w	r3, r3, #16
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352a:	623a      	str	r2, [r7, #32]
 800352c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	69f9      	ldr	r1, [r7, #28]
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	61bb      	str	r3, [r7, #24]
   return(result);
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e5      	bne.n	800350a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b10      	cmp	r3, #16
 800354a:	d10a      	bne.n	8003562 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff fdf9 	bl	8003160 <HAL_UARTEx_RxEventCallback>
 800356e:	e002      	b.n	8003576 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fde1 	bl	8003138 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e002      	b.n	8003580 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e000      	b.n	8003580 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3730      	adds	r7, #48	; 0x30
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358c:	b0c0      	sub	sp, #256	; 0x100
 800358e:	af00      	add	r7, sp, #0
 8003590:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	68d9      	ldr	r1, [r3, #12]
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	ea40 0301 	orr.w	r3, r0, r1
 80035b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	431a      	orrs	r2, r3
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035e0:	f021 010c 	bic.w	r1, r1, #12
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035ee:	430b      	orrs	r3, r1
 80035f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	6999      	ldr	r1, [r3, #24]
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	ea40 0301 	orr.w	r3, r0, r1
 800360e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b8f      	ldr	r3, [pc, #572]	; (8003854 <UART_SetConfig+0x2cc>)
 8003618:	429a      	cmp	r2, r3
 800361a:	d005      	beq.n	8003628 <UART_SetConfig+0xa0>
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b8d      	ldr	r3, [pc, #564]	; (8003858 <UART_SetConfig+0x2d0>)
 8003624:	429a      	cmp	r2, r3
 8003626:	d104      	bne.n	8003632 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7ff f958 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 800362c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003630:	e003      	b.n	800363a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003632:	f7ff f93f 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003636:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	f040 810c 	bne.w	8003860 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003652:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003656:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	1891      	adds	r1, r2, r2
 8003660:	65b9      	str	r1, [r7, #88]	; 0x58
 8003662:	415b      	adcs	r3, r3
 8003664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800366a:	4621      	mov	r1, r4
 800366c:	eb12 0801 	adds.w	r8, r2, r1
 8003670:	4629      	mov	r1, r5
 8003672:	eb43 0901 	adc.w	r9, r3, r1
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800368a:	4690      	mov	r8, r2
 800368c:	4699      	mov	r9, r3
 800368e:	4623      	mov	r3, r4
 8003690:	eb18 0303 	adds.w	r3, r8, r3
 8003694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003698:	462b      	mov	r3, r5
 800369a:	eb49 0303 	adc.w	r3, r9, r3
 800369e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036b6:	460b      	mov	r3, r1
 80036b8:	18db      	adds	r3, r3, r3
 80036ba:	653b      	str	r3, [r7, #80]	; 0x50
 80036bc:	4613      	mov	r3, r2
 80036be:	eb42 0303 	adc.w	r3, r2, r3
 80036c2:	657b      	str	r3, [r7, #84]	; 0x54
 80036c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036cc:	f7fc fdd8 	bl	8000280 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <UART_SetConfig+0x2d4>)
 80036d6:	fba3 2302 	umull	r2, r3, r3, r2
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	011c      	lsls	r4, r3, #4
 80036de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036f0:	4642      	mov	r2, r8
 80036f2:	464b      	mov	r3, r9
 80036f4:	1891      	adds	r1, r2, r2
 80036f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80036f8:	415b      	adcs	r3, r3
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003700:	4641      	mov	r1, r8
 8003702:	eb12 0a01 	adds.w	sl, r2, r1
 8003706:	4649      	mov	r1, r9
 8003708:	eb43 0b01 	adc.w	fp, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003718:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800371c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003720:	4692      	mov	sl, r2
 8003722:	469b      	mov	fp, r3
 8003724:	4643      	mov	r3, r8
 8003726:	eb1a 0303 	adds.w	r3, sl, r3
 800372a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800372e:	464b      	mov	r3, r9
 8003730:	eb4b 0303 	adc.w	r3, fp, r3
 8003734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003744:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003748:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800374c:	460b      	mov	r3, r1
 800374e:	18db      	adds	r3, r3, r3
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
 8003752:	4613      	mov	r3, r2
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	647b      	str	r3, [r7, #68]	; 0x44
 800375a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800375e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003762:	f7fc fd8d 	bl	8000280 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4611      	mov	r1, r2
 800376c:	4b3b      	ldr	r3, [pc, #236]	; (800385c <UART_SetConfig+0x2d4>)
 800376e:	fba3 2301 	umull	r2, r3, r3, r1
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2264      	movs	r2, #100	; 0x64
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	1acb      	subs	r3, r1, r3
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <UART_SetConfig+0x2d4>)
 8003784:	fba3 2302 	umull	r2, r3, r3, r2
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003790:	441c      	add	r4, r3
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800379c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037a4:	4642      	mov	r2, r8
 80037a6:	464b      	mov	r3, r9
 80037a8:	1891      	adds	r1, r2, r2
 80037aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80037ac:	415b      	adcs	r3, r3
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037b4:	4641      	mov	r1, r8
 80037b6:	1851      	adds	r1, r2, r1
 80037b8:	6339      	str	r1, [r7, #48]	; 0x30
 80037ba:	4649      	mov	r1, r9
 80037bc:	414b      	adcs	r3, r1
 80037be:	637b      	str	r3, [r7, #52]	; 0x34
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037cc:	4659      	mov	r1, fp
 80037ce:	00cb      	lsls	r3, r1, #3
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d6:	4651      	mov	r1, sl
 80037d8:	00ca      	lsls	r2, r1, #3
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	4642      	mov	r2, r8
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e8:	464b      	mov	r3, r9
 80037ea:	460a      	mov	r2, r1
 80037ec:	eb42 0303 	adc.w	r3, r2, r3
 80037f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003800:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003804:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003808:	460b      	mov	r3, r1
 800380a:	18db      	adds	r3, r3, r3
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
 800380e:	4613      	mov	r3, r2
 8003810:	eb42 0303 	adc.w	r3, r2, r3
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800381a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800381e:	f7fc fd2f 	bl	8000280 <__aeabi_uldivmod>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <UART_SetConfig+0x2d4>)
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2164      	movs	r1, #100	; 0x64
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <UART_SetConfig+0x2d4>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f003 0207 	and.w	r2, r3, #7
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4422      	add	r2, r4
 800384e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003850:	e106      	b.n	8003a60 <UART_SetConfig+0x4d8>
 8003852:	bf00      	nop
 8003854:	40011000 	.word	0x40011000
 8003858:	40011400 	.word	0x40011400
 800385c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003864:	2200      	movs	r2, #0
 8003866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800386a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800386e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003872:	4642      	mov	r2, r8
 8003874:	464b      	mov	r3, r9
 8003876:	1891      	adds	r1, r2, r2
 8003878:	6239      	str	r1, [r7, #32]
 800387a:	415b      	adcs	r3, r3
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003882:	4641      	mov	r1, r8
 8003884:	1854      	adds	r4, r2, r1
 8003886:	4649      	mov	r1, r9
 8003888:	eb43 0501 	adc.w	r5, r3, r1
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	00eb      	lsls	r3, r5, #3
 8003896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389a:	00e2      	lsls	r2, r4, #3
 800389c:	4614      	mov	r4, r2
 800389e:	461d      	mov	r5, r3
 80038a0:	4643      	mov	r3, r8
 80038a2:	18e3      	adds	r3, r4, r3
 80038a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038a8:	464b      	mov	r3, r9
 80038aa:	eb45 0303 	adc.w	r3, r5, r3
 80038ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038ce:	4629      	mov	r1, r5
 80038d0:	008b      	lsls	r3, r1, #2
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d8:	4621      	mov	r1, r4
 80038da:	008a      	lsls	r2, r1, #2
 80038dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038e0:	f7fc fcce 	bl	8000280 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4b60      	ldr	r3, [pc, #384]	; (8003a6c <UART_SetConfig+0x4e4>)
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	011c      	lsls	r4, r3, #4
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003900:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	1891      	adds	r1, r2, r2
 800390a:	61b9      	str	r1, [r7, #24]
 800390c:	415b      	adcs	r3, r3
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003914:	4641      	mov	r1, r8
 8003916:	1851      	adds	r1, r2, r1
 8003918:	6139      	str	r1, [r7, #16]
 800391a:	4649      	mov	r1, r9
 800391c:	414b      	adcs	r3, r1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800392c:	4659      	mov	r1, fp
 800392e:	00cb      	lsls	r3, r1, #3
 8003930:	4651      	mov	r1, sl
 8003932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003936:	4651      	mov	r1, sl
 8003938:	00ca      	lsls	r2, r1, #3
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	4603      	mov	r3, r0
 8003940:	4642      	mov	r2, r8
 8003942:	189b      	adds	r3, r3, r2
 8003944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003948:	464b      	mov	r3, r9
 800394a:	460a      	mov	r2, r1
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	67bb      	str	r3, [r7, #120]	; 0x78
 800395e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800396c:	4649      	mov	r1, r9
 800396e:	008b      	lsls	r3, r1, #2
 8003970:	4641      	mov	r1, r8
 8003972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003976:	4641      	mov	r1, r8
 8003978:	008a      	lsls	r2, r1, #2
 800397a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800397e:	f7fc fc7f 	bl	8000280 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4611      	mov	r1, r2
 8003988:	4b38      	ldr	r3, [pc, #224]	; (8003a6c <UART_SetConfig+0x4e4>)
 800398a:	fba3 2301 	umull	r2, r3, r3, r1
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	1acb      	subs	r3, r1, r3
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	3332      	adds	r3, #50	; 0x32
 800399c:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <UART_SetConfig+0x4e4>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a8:	441c      	add	r4, r3
 80039aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ae:	2200      	movs	r2, #0
 80039b0:	673b      	str	r3, [r7, #112]	; 0x70
 80039b2:	677a      	str	r2, [r7, #116]	; 0x74
 80039b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	1891      	adds	r1, r2, r2
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	415b      	adcs	r3, r3
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039c8:	4641      	mov	r1, r8
 80039ca:	1851      	adds	r1, r2, r1
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	4649      	mov	r1, r9
 80039d0:	414b      	adcs	r3, r1
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039e0:	4659      	mov	r1, fp
 80039e2:	00cb      	lsls	r3, r1, #3
 80039e4:	4651      	mov	r1, sl
 80039e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ea:	4651      	mov	r1, sl
 80039ec:	00ca      	lsls	r2, r1, #3
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	4642      	mov	r2, r8
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039fa:	464b      	mov	r3, r9
 80039fc:	460a      	mov	r2, r1
 80039fe:	eb42 0303 	adc.w	r3, r2, r3
 8003a02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a0e:	667a      	str	r2, [r7, #100]	; 0x64
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	008b      	lsls	r3, r1, #2
 8003a20:	4641      	mov	r1, r8
 8003a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a26:	4641      	mov	r1, r8
 8003a28:	008a      	lsls	r2, r1, #2
 8003a2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a2e:	f7fc fc27 	bl	8000280 <__aeabi_uldivmod>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <UART_SetConfig+0x4e4>)
 8003a38:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2164      	movs	r1, #100	; 0x64
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	3332      	adds	r3, #50	; 0x32
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <UART_SetConfig+0x4e4>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4422      	add	r2, r4
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a66:	46bd      	mov	sp, r7
 8003a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6c:	51eb851f 	.word	0x51eb851f

08003a70 <sniprintf>:
 8003a70:	b40c      	push	{r2, r3}
 8003a72:	b530      	push	{r4, r5, lr}
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <sniprintf+0x64>)
 8003a76:	1e0c      	subs	r4, r1, #0
 8003a78:	681d      	ldr	r5, [r3, #0]
 8003a7a:	b09d      	sub	sp, #116	; 0x74
 8003a7c:	da08      	bge.n	8003a90 <sniprintf+0x20>
 8003a7e:	238b      	movs	r3, #139	; 0x8b
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	f04f 30ff 	mov.w	r0, #4294967295
 8003a86:	b01d      	add	sp, #116	; 0x74
 8003a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a8c:	b002      	add	sp, #8
 8003a8e:	4770      	bx	lr
 8003a90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a98:	bf14      	ite	ne
 8003a9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a9e:	4623      	moveq	r3, r4
 8003aa0:	9304      	str	r3, [sp, #16]
 8003aa2:	9307      	str	r3, [sp, #28]
 8003aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aa8:	9002      	str	r0, [sp, #8]
 8003aaa:	9006      	str	r0, [sp, #24]
 8003aac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ab0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ab2:	ab21      	add	r3, sp, #132	; 0x84
 8003ab4:	a902      	add	r1, sp, #8
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	f000 f993 	bl	8003de4 <_svfiprintf_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	bfbc      	itt	lt
 8003ac2:	238b      	movlt	r3, #139	; 0x8b
 8003ac4:	602b      	strlt	r3, [r5, #0]
 8003ac6:	2c00      	cmp	r4, #0
 8003ac8:	d0dd      	beq.n	8003a86 <sniprintf+0x16>
 8003aca:	9b02      	ldr	r3, [sp, #8]
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e7d9      	b.n	8003a86 <sniprintf+0x16>
 8003ad2:	bf00      	nop
 8003ad4:	20000058 	.word	0x20000058

08003ad8 <memset>:
 8003ad8:	4402      	add	r2, r0
 8003ada:	4603      	mov	r3, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <memset+0xa>
 8003ae0:	4770      	bx	lr
 8003ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae6:	e7f9      	b.n	8003adc <memset+0x4>

08003ae8 <__errno>:
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <__errno+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000058 	.word	0x20000058

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4d0d      	ldr	r5, [pc, #52]	; (8003b2c <__libc_init_array+0x38>)
 8003af8:	4c0d      	ldr	r4, [pc, #52]	; (8003b30 <__libc_init_array+0x3c>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	2600      	movs	r6, #0
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	4d0b      	ldr	r5, [pc, #44]	; (8003b34 <__libc_init_array+0x40>)
 8003b06:	4c0c      	ldr	r4, [pc, #48]	; (8003b38 <__libc_init_array+0x44>)
 8003b08:	f000 fc6a 	bl	80043e0 <_init>
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	2600      	movs	r6, #0
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	0800446c 	.word	0x0800446c
 8003b30:	0800446c 	.word	0x0800446c
 8003b34:	0800446c 	.word	0x0800446c
 8003b38:	08004470 	.word	0x08004470

08003b3c <__retarget_lock_acquire_recursive>:
 8003b3c:	4770      	bx	lr

08003b3e <__retarget_lock_release_recursive>:
 8003b3e:	4770      	bx	lr

08003b40 <_free_r>:
 8003b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b42:	2900      	cmp	r1, #0
 8003b44:	d044      	beq.n	8003bd0 <_free_r+0x90>
 8003b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b4a:	9001      	str	r0, [sp, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8003b52:	bfb8      	it	lt
 8003b54:	18e4      	addlt	r4, r4, r3
 8003b56:	f000 f8df 	bl	8003d18 <__malloc_lock>
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <_free_r+0x94>)
 8003b5c:	9801      	ldr	r0, [sp, #4]
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	b933      	cbnz	r3, 8003b70 <_free_r+0x30>
 8003b62:	6063      	str	r3, [r4, #4]
 8003b64:	6014      	str	r4, [r2, #0]
 8003b66:	b003      	add	sp, #12
 8003b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b6c:	f000 b8da 	b.w	8003d24 <__malloc_unlock>
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d908      	bls.n	8003b86 <_free_r+0x46>
 8003b74:	6825      	ldr	r5, [r4, #0]
 8003b76:	1961      	adds	r1, r4, r5
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	bf01      	itttt	eq
 8003b7c:	6819      	ldreq	r1, [r3, #0]
 8003b7e:	685b      	ldreq	r3, [r3, #4]
 8003b80:	1949      	addeq	r1, r1, r5
 8003b82:	6021      	streq	r1, [r4, #0]
 8003b84:	e7ed      	b.n	8003b62 <_free_r+0x22>
 8003b86:	461a      	mov	r2, r3
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	b10b      	cbz	r3, 8003b90 <_free_r+0x50>
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d9fa      	bls.n	8003b86 <_free_r+0x46>
 8003b90:	6811      	ldr	r1, [r2, #0]
 8003b92:	1855      	adds	r5, r2, r1
 8003b94:	42a5      	cmp	r5, r4
 8003b96:	d10b      	bne.n	8003bb0 <_free_r+0x70>
 8003b98:	6824      	ldr	r4, [r4, #0]
 8003b9a:	4421      	add	r1, r4
 8003b9c:	1854      	adds	r4, r2, r1
 8003b9e:	42a3      	cmp	r3, r4
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	d1e0      	bne.n	8003b66 <_free_r+0x26>
 8003ba4:	681c      	ldr	r4, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	6053      	str	r3, [r2, #4]
 8003baa:	440c      	add	r4, r1
 8003bac:	6014      	str	r4, [r2, #0]
 8003bae:	e7da      	b.n	8003b66 <_free_r+0x26>
 8003bb0:	d902      	bls.n	8003bb8 <_free_r+0x78>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	6003      	str	r3, [r0, #0]
 8003bb6:	e7d6      	b.n	8003b66 <_free_r+0x26>
 8003bb8:	6825      	ldr	r5, [r4, #0]
 8003bba:	1961      	adds	r1, r4, r5
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	bf04      	itt	eq
 8003bc0:	6819      	ldreq	r1, [r3, #0]
 8003bc2:	685b      	ldreq	r3, [r3, #4]
 8003bc4:	6063      	str	r3, [r4, #4]
 8003bc6:	bf04      	itt	eq
 8003bc8:	1949      	addeq	r1, r1, r5
 8003bca:	6021      	streq	r1, [r4, #0]
 8003bcc:	6054      	str	r4, [r2, #4]
 8003bce:	e7ca      	b.n	8003b66 <_free_r+0x26>
 8003bd0:	b003      	add	sp, #12
 8003bd2:	bd30      	pop	{r4, r5, pc}
 8003bd4:	200002b0 	.word	0x200002b0

08003bd8 <sbrk_aligned>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4e0e      	ldr	r6, [pc, #56]	; (8003c14 <sbrk_aligned+0x3c>)
 8003bdc:	460c      	mov	r4, r1
 8003bde:	6831      	ldr	r1, [r6, #0]
 8003be0:	4605      	mov	r5, r0
 8003be2:	b911      	cbnz	r1, 8003bea <sbrk_aligned+0x12>
 8003be4:	f000 fba6 	bl	8004334 <_sbrk_r>
 8003be8:	6030      	str	r0, [r6, #0]
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 fba1 	bl	8004334 <_sbrk_r>
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	d00a      	beq.n	8003c0c <sbrk_aligned+0x34>
 8003bf6:	1cc4      	adds	r4, r0, #3
 8003bf8:	f024 0403 	bic.w	r4, r4, #3
 8003bfc:	42a0      	cmp	r0, r4
 8003bfe:	d007      	beq.n	8003c10 <sbrk_aligned+0x38>
 8003c00:	1a21      	subs	r1, r4, r0
 8003c02:	4628      	mov	r0, r5
 8003c04:	f000 fb96 	bl	8004334 <_sbrk_r>
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d101      	bne.n	8003c10 <sbrk_aligned+0x38>
 8003c0c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c10:	4620      	mov	r0, r4
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	200002b4 	.word	0x200002b4

08003c18 <_malloc_r>:
 8003c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c1c:	1ccd      	adds	r5, r1, #3
 8003c1e:	f025 0503 	bic.w	r5, r5, #3
 8003c22:	3508      	adds	r5, #8
 8003c24:	2d0c      	cmp	r5, #12
 8003c26:	bf38      	it	cc
 8003c28:	250c      	movcc	r5, #12
 8003c2a:	2d00      	cmp	r5, #0
 8003c2c:	4607      	mov	r7, r0
 8003c2e:	db01      	blt.n	8003c34 <_malloc_r+0x1c>
 8003c30:	42a9      	cmp	r1, r5
 8003c32:	d905      	bls.n	8003c40 <_malloc_r+0x28>
 8003c34:	230c      	movs	r3, #12
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	2600      	movs	r6, #0
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d14 <_malloc_r+0xfc>
 8003c44:	f000 f868 	bl	8003d18 <__malloc_lock>
 8003c48:	f8d8 3000 	ldr.w	r3, [r8]
 8003c4c:	461c      	mov	r4, r3
 8003c4e:	bb5c      	cbnz	r4, 8003ca8 <_malloc_r+0x90>
 8003c50:	4629      	mov	r1, r5
 8003c52:	4638      	mov	r0, r7
 8003c54:	f7ff ffc0 	bl	8003bd8 <sbrk_aligned>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	d155      	bne.n	8003d0a <_malloc_r+0xf2>
 8003c5e:	f8d8 4000 	ldr.w	r4, [r8]
 8003c62:	4626      	mov	r6, r4
 8003c64:	2e00      	cmp	r6, #0
 8003c66:	d145      	bne.n	8003cf4 <_malloc_r+0xdc>
 8003c68:	2c00      	cmp	r4, #0
 8003c6a:	d048      	beq.n	8003cfe <_malloc_r+0xe6>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	4631      	mov	r1, r6
 8003c70:	4638      	mov	r0, r7
 8003c72:	eb04 0903 	add.w	r9, r4, r3
 8003c76:	f000 fb5d 	bl	8004334 <_sbrk_r>
 8003c7a:	4581      	cmp	r9, r0
 8003c7c:	d13f      	bne.n	8003cfe <_malloc_r+0xe6>
 8003c7e:	6821      	ldr	r1, [r4, #0]
 8003c80:	1a6d      	subs	r5, r5, r1
 8003c82:	4629      	mov	r1, r5
 8003c84:	4638      	mov	r0, r7
 8003c86:	f7ff ffa7 	bl	8003bd8 <sbrk_aligned>
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d037      	beq.n	8003cfe <_malloc_r+0xe6>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	442b      	add	r3, r5
 8003c92:	6023      	str	r3, [r4, #0]
 8003c94:	f8d8 3000 	ldr.w	r3, [r8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d038      	beq.n	8003d0e <_malloc_r+0xf6>
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	42a2      	cmp	r2, r4
 8003ca0:	d12b      	bne.n	8003cfa <_malloc_r+0xe2>
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	e00f      	b.n	8003cc8 <_malloc_r+0xb0>
 8003ca8:	6822      	ldr	r2, [r4, #0]
 8003caa:	1b52      	subs	r2, r2, r5
 8003cac:	d41f      	bmi.n	8003cee <_malloc_r+0xd6>
 8003cae:	2a0b      	cmp	r2, #11
 8003cb0:	d917      	bls.n	8003ce2 <_malloc_r+0xca>
 8003cb2:	1961      	adds	r1, r4, r5
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	6025      	str	r5, [r4, #0]
 8003cb8:	bf18      	it	ne
 8003cba:	6059      	strne	r1, [r3, #4]
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	bf08      	it	eq
 8003cc0:	f8c8 1000 	streq.w	r1, [r8]
 8003cc4:	5162      	str	r2, [r4, r5]
 8003cc6:	604b      	str	r3, [r1, #4]
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f104 060b 	add.w	r6, r4, #11
 8003cce:	f000 f829 	bl	8003d24 <__malloc_unlock>
 8003cd2:	f026 0607 	bic.w	r6, r6, #7
 8003cd6:	1d23      	adds	r3, r4, #4
 8003cd8:	1af2      	subs	r2, r6, r3
 8003cda:	d0ae      	beq.n	8003c3a <_malloc_r+0x22>
 8003cdc:	1b9b      	subs	r3, r3, r6
 8003cde:	50a3      	str	r3, [r4, r2]
 8003ce0:	e7ab      	b.n	8003c3a <_malloc_r+0x22>
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	6862      	ldr	r2, [r4, #4]
 8003ce6:	d1dd      	bne.n	8003ca4 <_malloc_r+0x8c>
 8003ce8:	f8c8 2000 	str.w	r2, [r8]
 8003cec:	e7ec      	b.n	8003cc8 <_malloc_r+0xb0>
 8003cee:	4623      	mov	r3, r4
 8003cf0:	6864      	ldr	r4, [r4, #4]
 8003cf2:	e7ac      	b.n	8003c4e <_malloc_r+0x36>
 8003cf4:	4634      	mov	r4, r6
 8003cf6:	6876      	ldr	r6, [r6, #4]
 8003cf8:	e7b4      	b.n	8003c64 <_malloc_r+0x4c>
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	e7cc      	b.n	8003c98 <_malloc_r+0x80>
 8003cfe:	230c      	movs	r3, #12
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4638      	mov	r0, r7
 8003d04:	f000 f80e 	bl	8003d24 <__malloc_unlock>
 8003d08:	e797      	b.n	8003c3a <_malloc_r+0x22>
 8003d0a:	6025      	str	r5, [r4, #0]
 8003d0c:	e7dc      	b.n	8003cc8 <_malloc_r+0xb0>
 8003d0e:	605b      	str	r3, [r3, #4]
 8003d10:	deff      	udf	#255	; 0xff
 8003d12:	bf00      	nop
 8003d14:	200002b0 	.word	0x200002b0

08003d18 <__malloc_lock>:
 8003d18:	4801      	ldr	r0, [pc, #4]	; (8003d20 <__malloc_lock+0x8>)
 8003d1a:	f7ff bf0f 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 8003d1e:	bf00      	nop
 8003d20:	200002ac 	.word	0x200002ac

08003d24 <__malloc_unlock>:
 8003d24:	4801      	ldr	r0, [pc, #4]	; (8003d2c <__malloc_unlock+0x8>)
 8003d26:	f7ff bf0a 	b.w	8003b3e <__retarget_lock_release_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	200002ac 	.word	0x200002ac

08003d30 <__ssputs_r>:
 8003d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	688e      	ldr	r6, [r1, #8]
 8003d36:	461f      	mov	r7, r3
 8003d38:	42be      	cmp	r6, r7
 8003d3a:	680b      	ldr	r3, [r1, #0]
 8003d3c:	4682      	mov	sl, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	4690      	mov	r8, r2
 8003d42:	d82c      	bhi.n	8003d9e <__ssputs_r+0x6e>
 8003d44:	898a      	ldrh	r2, [r1, #12]
 8003d46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d4a:	d026      	beq.n	8003d9a <__ssputs_r+0x6a>
 8003d4c:	6965      	ldr	r5, [r4, #20]
 8003d4e:	6909      	ldr	r1, [r1, #16]
 8003d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d54:	eba3 0901 	sub.w	r9, r3, r1
 8003d58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d5c:	1c7b      	adds	r3, r7, #1
 8003d5e:	444b      	add	r3, r9
 8003d60:	106d      	asrs	r5, r5, #1
 8003d62:	429d      	cmp	r5, r3
 8003d64:	bf38      	it	cc
 8003d66:	461d      	movcc	r5, r3
 8003d68:	0553      	lsls	r3, r2, #21
 8003d6a:	d527      	bpl.n	8003dbc <__ssputs_r+0x8c>
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	f7ff ff53 	bl	8003c18 <_malloc_r>
 8003d72:	4606      	mov	r6, r0
 8003d74:	b360      	cbz	r0, 8003dd0 <__ssputs_r+0xa0>
 8003d76:	6921      	ldr	r1, [r4, #16]
 8003d78:	464a      	mov	r2, r9
 8003d7a:	f000 faeb 	bl	8004354 <memcpy>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	6126      	str	r6, [r4, #16]
 8003d8c:	6165      	str	r5, [r4, #20]
 8003d8e:	444e      	add	r6, r9
 8003d90:	eba5 0509 	sub.w	r5, r5, r9
 8003d94:	6026      	str	r6, [r4, #0]
 8003d96:	60a5      	str	r5, [r4, #8]
 8003d98:	463e      	mov	r6, r7
 8003d9a:	42be      	cmp	r6, r7
 8003d9c:	d900      	bls.n	8003da0 <__ssputs_r+0x70>
 8003d9e:	463e      	mov	r6, r7
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	4632      	mov	r2, r6
 8003da4:	4641      	mov	r1, r8
 8003da6:	f000 faab 	bl	8004300 <memmove>
 8003daa:	68a3      	ldr	r3, [r4, #8]
 8003dac:	1b9b      	subs	r3, r3, r6
 8003dae:	60a3      	str	r3, [r4, #8]
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	4433      	add	r3, r6
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	2000      	movs	r0, #0
 8003db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dbc:	462a      	mov	r2, r5
 8003dbe:	f000 fad7 	bl	8004370 <_realloc_r>
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d1e0      	bne.n	8003d8a <__ssputs_r+0x5a>
 8003dc8:	6921      	ldr	r1, [r4, #16]
 8003dca:	4650      	mov	r0, sl
 8003dcc:	f7ff feb8 	bl	8003b40 <_free_r>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	f8ca 3000 	str.w	r3, [sl]
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ddc:	81a3      	strh	r3, [r4, #12]
 8003dde:	f04f 30ff 	mov.w	r0, #4294967295
 8003de2:	e7e9      	b.n	8003db8 <__ssputs_r+0x88>

08003de4 <_svfiprintf_r>:
 8003de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	4698      	mov	r8, r3
 8003dea:	898b      	ldrh	r3, [r1, #12]
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	b09d      	sub	sp, #116	; 0x74
 8003df0:	4607      	mov	r7, r0
 8003df2:	460d      	mov	r5, r1
 8003df4:	4614      	mov	r4, r2
 8003df6:	d50e      	bpl.n	8003e16 <_svfiprintf_r+0x32>
 8003df8:	690b      	ldr	r3, [r1, #16]
 8003dfa:	b963      	cbnz	r3, 8003e16 <_svfiprintf_r+0x32>
 8003dfc:	2140      	movs	r1, #64	; 0x40
 8003dfe:	f7ff ff0b 	bl	8003c18 <_malloc_r>
 8003e02:	6028      	str	r0, [r5, #0]
 8003e04:	6128      	str	r0, [r5, #16]
 8003e06:	b920      	cbnz	r0, 8003e12 <_svfiprintf_r+0x2e>
 8003e08:	230c      	movs	r3, #12
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	e0d0      	b.n	8003fb4 <_svfiprintf_r+0x1d0>
 8003e12:	2340      	movs	r3, #64	; 0x40
 8003e14:	616b      	str	r3, [r5, #20]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9309      	str	r3, [sp, #36]	; 0x24
 8003e1a:	2320      	movs	r3, #32
 8003e1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e24:	2330      	movs	r3, #48	; 0x30
 8003e26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fcc <_svfiprintf_r+0x1e8>
 8003e2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e2e:	f04f 0901 	mov.w	r9, #1
 8003e32:	4623      	mov	r3, r4
 8003e34:	469a      	mov	sl, r3
 8003e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e3a:	b10a      	cbz	r2, 8003e40 <_svfiprintf_r+0x5c>
 8003e3c:	2a25      	cmp	r2, #37	; 0x25
 8003e3e:	d1f9      	bne.n	8003e34 <_svfiprintf_r+0x50>
 8003e40:	ebba 0b04 	subs.w	fp, sl, r4
 8003e44:	d00b      	beq.n	8003e5e <_svfiprintf_r+0x7a>
 8003e46:	465b      	mov	r3, fp
 8003e48:	4622      	mov	r2, r4
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	f7ff ff6f 	bl	8003d30 <__ssputs_r>
 8003e52:	3001      	adds	r0, #1
 8003e54:	f000 80a9 	beq.w	8003faa <_svfiprintf_r+0x1c6>
 8003e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e5a:	445a      	add	r2, fp
 8003e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80a1 	beq.w	8003faa <_svfiprintf_r+0x1c6>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e72:	f10a 0a01 	add.w	sl, sl, #1
 8003e76:	9304      	str	r3, [sp, #16]
 8003e78:	9307      	str	r3, [sp, #28]
 8003e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e80:	4654      	mov	r4, sl
 8003e82:	2205      	movs	r2, #5
 8003e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e88:	4850      	ldr	r0, [pc, #320]	; (8003fcc <_svfiprintf_r+0x1e8>)
 8003e8a:	f7fc f9a9 	bl	80001e0 <memchr>
 8003e8e:	9a04      	ldr	r2, [sp, #16]
 8003e90:	b9d8      	cbnz	r0, 8003eca <_svfiprintf_r+0xe6>
 8003e92:	06d0      	lsls	r0, r2, #27
 8003e94:	bf44      	itt	mi
 8003e96:	2320      	movmi	r3, #32
 8003e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e9c:	0711      	lsls	r1, r2, #28
 8003e9e:	bf44      	itt	mi
 8003ea0:	232b      	movmi	r3, #43	; 0x2b
 8003ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8003eac:	d015      	beq.n	8003eda <_svfiprintf_r+0xf6>
 8003eae:	9a07      	ldr	r2, [sp, #28]
 8003eb0:	4654      	mov	r4, sl
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f04f 0c0a 	mov.w	ip, #10
 8003eb8:	4621      	mov	r1, r4
 8003eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ebe:	3b30      	subs	r3, #48	; 0x30
 8003ec0:	2b09      	cmp	r3, #9
 8003ec2:	d94d      	bls.n	8003f60 <_svfiprintf_r+0x17c>
 8003ec4:	b1b0      	cbz	r0, 8003ef4 <_svfiprintf_r+0x110>
 8003ec6:	9207      	str	r2, [sp, #28]
 8003ec8:	e014      	b.n	8003ef4 <_svfiprintf_r+0x110>
 8003eca:	eba0 0308 	sub.w	r3, r0, r8
 8003ece:	fa09 f303 	lsl.w	r3, r9, r3
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	9304      	str	r3, [sp, #16]
 8003ed6:	46a2      	mov	sl, r4
 8003ed8:	e7d2      	b.n	8003e80 <_svfiprintf_r+0x9c>
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	1d19      	adds	r1, r3, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	9103      	str	r1, [sp, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bfbb      	ittet	lt
 8003ee6:	425b      	neglt	r3, r3
 8003ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8003eec:	9307      	strge	r3, [sp, #28]
 8003eee:	9307      	strlt	r3, [sp, #28]
 8003ef0:	bfb8      	it	lt
 8003ef2:	9204      	strlt	r2, [sp, #16]
 8003ef4:	7823      	ldrb	r3, [r4, #0]
 8003ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ef8:	d10c      	bne.n	8003f14 <_svfiprintf_r+0x130>
 8003efa:	7863      	ldrb	r3, [r4, #1]
 8003efc:	2b2a      	cmp	r3, #42	; 0x2a
 8003efe:	d134      	bne.n	8003f6a <_svfiprintf_r+0x186>
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	1d1a      	adds	r2, r3, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	9203      	str	r2, [sp, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bfb8      	it	lt
 8003f0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f10:	3402      	adds	r4, #2
 8003f12:	9305      	str	r3, [sp, #20]
 8003f14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003fdc <_svfiprintf_r+0x1f8>
 8003f18:	7821      	ldrb	r1, [r4, #0]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	4650      	mov	r0, sl
 8003f1e:	f7fc f95f 	bl	80001e0 <memchr>
 8003f22:	b138      	cbz	r0, 8003f34 <_svfiprintf_r+0x150>
 8003f24:	9b04      	ldr	r3, [sp, #16]
 8003f26:	eba0 000a 	sub.w	r0, r0, sl
 8003f2a:	2240      	movs	r2, #64	; 0x40
 8003f2c:	4082      	lsls	r2, r0
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	3401      	adds	r4, #1
 8003f32:	9304      	str	r3, [sp, #16]
 8003f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f38:	4825      	ldr	r0, [pc, #148]	; (8003fd0 <_svfiprintf_r+0x1ec>)
 8003f3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f3e:	2206      	movs	r2, #6
 8003f40:	f7fc f94e 	bl	80001e0 <memchr>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d038      	beq.n	8003fba <_svfiprintf_r+0x1d6>
 8003f48:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <_svfiprintf_r+0x1f0>)
 8003f4a:	bb1b      	cbnz	r3, 8003f94 <_svfiprintf_r+0x1b0>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	3307      	adds	r3, #7
 8003f50:	f023 0307 	bic.w	r3, r3, #7
 8003f54:	3308      	adds	r3, #8
 8003f56:	9303      	str	r3, [sp, #12]
 8003f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5a:	4433      	add	r3, r6
 8003f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5e:	e768      	b.n	8003e32 <_svfiprintf_r+0x4e>
 8003f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f64:	460c      	mov	r4, r1
 8003f66:	2001      	movs	r0, #1
 8003f68:	e7a6      	b.n	8003eb8 <_svfiprintf_r+0xd4>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	3401      	adds	r4, #1
 8003f6e:	9305      	str	r3, [sp, #20]
 8003f70:	4619      	mov	r1, r3
 8003f72:	f04f 0c0a 	mov.w	ip, #10
 8003f76:	4620      	mov	r0, r4
 8003f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f7c:	3a30      	subs	r2, #48	; 0x30
 8003f7e:	2a09      	cmp	r2, #9
 8003f80:	d903      	bls.n	8003f8a <_svfiprintf_r+0x1a6>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0c6      	beq.n	8003f14 <_svfiprintf_r+0x130>
 8003f86:	9105      	str	r1, [sp, #20]
 8003f88:	e7c4      	b.n	8003f14 <_svfiprintf_r+0x130>
 8003f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f8e:	4604      	mov	r4, r0
 8003f90:	2301      	movs	r3, #1
 8003f92:	e7f0      	b.n	8003f76 <_svfiprintf_r+0x192>
 8003f94:	ab03      	add	r3, sp, #12
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	462a      	mov	r2, r5
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <_svfiprintf_r+0x1f4>)
 8003f9c:	a904      	add	r1, sp, #16
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f3af 8000 	nop.w
 8003fa4:	1c42      	adds	r2, r0, #1
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	d1d6      	bne.n	8003f58 <_svfiprintf_r+0x174>
 8003faa:	89ab      	ldrh	r3, [r5, #12]
 8003fac:	065b      	lsls	r3, r3, #25
 8003fae:	f53f af2d 	bmi.w	8003e0c <_svfiprintf_r+0x28>
 8003fb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fb4:	b01d      	add	sp, #116	; 0x74
 8003fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fba:	ab03      	add	r3, sp, #12
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	462a      	mov	r2, r5
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <_svfiprintf_r+0x1f4>)
 8003fc2:	a904      	add	r1, sp, #16
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	f000 f879 	bl	80040bc <_printf_i>
 8003fca:	e7eb      	b.n	8003fa4 <_svfiprintf_r+0x1c0>
 8003fcc:	08004430 	.word	0x08004430
 8003fd0:	0800443a 	.word	0x0800443a
 8003fd4:	00000000 	.word	0x00000000
 8003fd8:	08003d31 	.word	0x08003d31
 8003fdc:	08004436 	.word	0x08004436

08003fe0 <_printf_common>:
 8003fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	4616      	mov	r6, r2
 8003fe6:	4699      	mov	r9, r3
 8003fe8:	688a      	ldr	r2, [r1, #8]
 8003fea:	690b      	ldr	r3, [r1, #16]
 8003fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bfb8      	it	lt
 8003ff4:	4613      	movlt	r3, r2
 8003ff6:	6033      	str	r3, [r6, #0]
 8003ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	b10a      	cbz	r2, 8004006 <_printf_common+0x26>
 8004002:	3301      	adds	r3, #1
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	0699      	lsls	r1, r3, #26
 800400a:	bf42      	ittt	mi
 800400c:	6833      	ldrmi	r3, [r6, #0]
 800400e:	3302      	addmi	r3, #2
 8004010:	6033      	strmi	r3, [r6, #0]
 8004012:	6825      	ldr	r5, [r4, #0]
 8004014:	f015 0506 	ands.w	r5, r5, #6
 8004018:	d106      	bne.n	8004028 <_printf_common+0x48>
 800401a:	f104 0a19 	add.w	sl, r4, #25
 800401e:	68e3      	ldr	r3, [r4, #12]
 8004020:	6832      	ldr	r2, [r6, #0]
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	42ab      	cmp	r3, r5
 8004026:	dc26      	bgt.n	8004076 <_printf_common+0x96>
 8004028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800402c:	1e13      	subs	r3, r2, #0
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	bf18      	it	ne
 8004032:	2301      	movne	r3, #1
 8004034:	0692      	lsls	r2, r2, #26
 8004036:	d42b      	bmi.n	8004090 <_printf_common+0xb0>
 8004038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800403c:	4649      	mov	r1, r9
 800403e:	4638      	mov	r0, r7
 8004040:	47c0      	blx	r8
 8004042:	3001      	adds	r0, #1
 8004044:	d01e      	beq.n	8004084 <_printf_common+0xa4>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	6922      	ldr	r2, [r4, #16]
 800404a:	f003 0306 	and.w	r3, r3, #6
 800404e:	2b04      	cmp	r3, #4
 8004050:	bf02      	ittt	eq
 8004052:	68e5      	ldreq	r5, [r4, #12]
 8004054:	6833      	ldreq	r3, [r6, #0]
 8004056:	1aed      	subeq	r5, r5, r3
 8004058:	68a3      	ldr	r3, [r4, #8]
 800405a:	bf0c      	ite	eq
 800405c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004060:	2500      	movne	r5, #0
 8004062:	4293      	cmp	r3, r2
 8004064:	bfc4      	itt	gt
 8004066:	1a9b      	subgt	r3, r3, r2
 8004068:	18ed      	addgt	r5, r5, r3
 800406a:	2600      	movs	r6, #0
 800406c:	341a      	adds	r4, #26
 800406e:	42b5      	cmp	r5, r6
 8004070:	d11a      	bne.n	80040a8 <_printf_common+0xc8>
 8004072:	2000      	movs	r0, #0
 8004074:	e008      	b.n	8004088 <_printf_common+0xa8>
 8004076:	2301      	movs	r3, #1
 8004078:	4652      	mov	r2, sl
 800407a:	4649      	mov	r1, r9
 800407c:	4638      	mov	r0, r7
 800407e:	47c0      	blx	r8
 8004080:	3001      	adds	r0, #1
 8004082:	d103      	bne.n	800408c <_printf_common+0xac>
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408c:	3501      	adds	r5, #1
 800408e:	e7c6      	b.n	800401e <_printf_common+0x3e>
 8004090:	18e1      	adds	r1, r4, r3
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	2030      	movs	r0, #48	; 0x30
 8004096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800409a:	4422      	add	r2, r4
 800409c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040a4:	3302      	adds	r3, #2
 80040a6:	e7c7      	b.n	8004038 <_printf_common+0x58>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4622      	mov	r2, r4
 80040ac:	4649      	mov	r1, r9
 80040ae:	4638      	mov	r0, r7
 80040b0:	47c0      	blx	r8
 80040b2:	3001      	adds	r0, #1
 80040b4:	d0e6      	beq.n	8004084 <_printf_common+0xa4>
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7d9      	b.n	800406e <_printf_common+0x8e>
	...

080040bc <_printf_i>:
 80040bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c0:	7e0f      	ldrb	r7, [r1, #24]
 80040c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040c4:	2f78      	cmp	r7, #120	; 0x78
 80040c6:	4691      	mov	r9, r2
 80040c8:	4680      	mov	r8, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	469a      	mov	sl, r3
 80040ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040d2:	d807      	bhi.n	80040e4 <_printf_i+0x28>
 80040d4:	2f62      	cmp	r7, #98	; 0x62
 80040d6:	d80a      	bhi.n	80040ee <_printf_i+0x32>
 80040d8:	2f00      	cmp	r7, #0
 80040da:	f000 80d4 	beq.w	8004286 <_printf_i+0x1ca>
 80040de:	2f58      	cmp	r7, #88	; 0x58
 80040e0:	f000 80c0 	beq.w	8004264 <_printf_i+0x1a8>
 80040e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040ec:	e03a      	b.n	8004164 <_printf_i+0xa8>
 80040ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040f2:	2b15      	cmp	r3, #21
 80040f4:	d8f6      	bhi.n	80040e4 <_printf_i+0x28>
 80040f6:	a101      	add	r1, pc, #4	; (adr r1, 80040fc <_printf_i+0x40>)
 80040f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004169 	.word	0x08004169
 8004104:	080040e5 	.word	0x080040e5
 8004108:	080040e5 	.word	0x080040e5
 800410c:	080040e5 	.word	0x080040e5
 8004110:	080040e5 	.word	0x080040e5
 8004114:	08004169 	.word	0x08004169
 8004118:	080040e5 	.word	0x080040e5
 800411c:	080040e5 	.word	0x080040e5
 8004120:	080040e5 	.word	0x080040e5
 8004124:	080040e5 	.word	0x080040e5
 8004128:	0800426d 	.word	0x0800426d
 800412c:	08004195 	.word	0x08004195
 8004130:	08004227 	.word	0x08004227
 8004134:	080040e5 	.word	0x080040e5
 8004138:	080040e5 	.word	0x080040e5
 800413c:	0800428f 	.word	0x0800428f
 8004140:	080040e5 	.word	0x080040e5
 8004144:	08004195 	.word	0x08004195
 8004148:	080040e5 	.word	0x080040e5
 800414c:	080040e5 	.word	0x080040e5
 8004150:	0800422f 	.word	0x0800422f
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	1d1a      	adds	r2, r3, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	602a      	str	r2, [r5, #0]
 800415c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004164:	2301      	movs	r3, #1
 8004166:	e09f      	b.n	80042a8 <_printf_i+0x1ec>
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	682b      	ldr	r3, [r5, #0]
 800416c:	0607      	lsls	r7, r0, #24
 800416e:	f103 0104 	add.w	r1, r3, #4
 8004172:	6029      	str	r1, [r5, #0]
 8004174:	d501      	bpl.n	800417a <_printf_i+0xbe>
 8004176:	681e      	ldr	r6, [r3, #0]
 8004178:	e003      	b.n	8004182 <_printf_i+0xc6>
 800417a:	0646      	lsls	r6, r0, #25
 800417c:	d5fb      	bpl.n	8004176 <_printf_i+0xba>
 800417e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004182:	2e00      	cmp	r6, #0
 8004184:	da03      	bge.n	800418e <_printf_i+0xd2>
 8004186:	232d      	movs	r3, #45	; 0x2d
 8004188:	4276      	negs	r6, r6
 800418a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800418e:	485a      	ldr	r0, [pc, #360]	; (80042f8 <_printf_i+0x23c>)
 8004190:	230a      	movs	r3, #10
 8004192:	e012      	b.n	80041ba <_printf_i+0xfe>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	1d19      	adds	r1, r3, #4
 800419a:	6029      	str	r1, [r5, #0]
 800419c:	0605      	lsls	r5, r0, #24
 800419e:	d501      	bpl.n	80041a4 <_printf_i+0xe8>
 80041a0:	681e      	ldr	r6, [r3, #0]
 80041a2:	e002      	b.n	80041aa <_printf_i+0xee>
 80041a4:	0641      	lsls	r1, r0, #25
 80041a6:	d5fb      	bpl.n	80041a0 <_printf_i+0xe4>
 80041a8:	881e      	ldrh	r6, [r3, #0]
 80041aa:	4853      	ldr	r0, [pc, #332]	; (80042f8 <_printf_i+0x23c>)
 80041ac:	2f6f      	cmp	r7, #111	; 0x6f
 80041ae:	bf0c      	ite	eq
 80041b0:	2308      	moveq	r3, #8
 80041b2:	230a      	movne	r3, #10
 80041b4:	2100      	movs	r1, #0
 80041b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ba:	6865      	ldr	r5, [r4, #4]
 80041bc:	60a5      	str	r5, [r4, #8]
 80041be:	2d00      	cmp	r5, #0
 80041c0:	bfa2      	ittt	ge
 80041c2:	6821      	ldrge	r1, [r4, #0]
 80041c4:	f021 0104 	bicge.w	r1, r1, #4
 80041c8:	6021      	strge	r1, [r4, #0]
 80041ca:	b90e      	cbnz	r6, 80041d0 <_printf_i+0x114>
 80041cc:	2d00      	cmp	r5, #0
 80041ce:	d04b      	beq.n	8004268 <_printf_i+0x1ac>
 80041d0:	4615      	mov	r5, r2
 80041d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80041d6:	fb03 6711 	mls	r7, r3, r1, r6
 80041da:	5dc7      	ldrb	r7, [r0, r7]
 80041dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041e0:	4637      	mov	r7, r6
 80041e2:	42bb      	cmp	r3, r7
 80041e4:	460e      	mov	r6, r1
 80041e6:	d9f4      	bls.n	80041d2 <_printf_i+0x116>
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d10b      	bne.n	8004204 <_printf_i+0x148>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	07de      	lsls	r6, r3, #31
 80041f0:	d508      	bpl.n	8004204 <_printf_i+0x148>
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	6861      	ldr	r1, [r4, #4]
 80041f6:	4299      	cmp	r1, r3
 80041f8:	bfde      	ittt	le
 80041fa:	2330      	movle	r3, #48	; 0x30
 80041fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004200:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004204:	1b52      	subs	r2, r2, r5
 8004206:	6122      	str	r2, [r4, #16]
 8004208:	f8cd a000 	str.w	sl, [sp]
 800420c:	464b      	mov	r3, r9
 800420e:	aa03      	add	r2, sp, #12
 8004210:	4621      	mov	r1, r4
 8004212:	4640      	mov	r0, r8
 8004214:	f7ff fee4 	bl	8003fe0 <_printf_common>
 8004218:	3001      	adds	r0, #1
 800421a:	d14a      	bne.n	80042b2 <_printf_i+0x1f6>
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	b004      	add	sp, #16
 8004222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	f043 0320 	orr.w	r3, r3, #32
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	4833      	ldr	r0, [pc, #204]	; (80042fc <_printf_i+0x240>)
 8004230:	2778      	movs	r7, #120	; 0x78
 8004232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	6829      	ldr	r1, [r5, #0]
 800423a:	061f      	lsls	r7, r3, #24
 800423c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004240:	d402      	bmi.n	8004248 <_printf_i+0x18c>
 8004242:	065f      	lsls	r7, r3, #25
 8004244:	bf48      	it	mi
 8004246:	b2b6      	uxthmi	r6, r6
 8004248:	07df      	lsls	r7, r3, #31
 800424a:	bf48      	it	mi
 800424c:	f043 0320 	orrmi.w	r3, r3, #32
 8004250:	6029      	str	r1, [r5, #0]
 8004252:	bf48      	it	mi
 8004254:	6023      	strmi	r3, [r4, #0]
 8004256:	b91e      	cbnz	r6, 8004260 <_printf_i+0x1a4>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	f023 0320 	bic.w	r3, r3, #32
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	2310      	movs	r3, #16
 8004262:	e7a7      	b.n	80041b4 <_printf_i+0xf8>
 8004264:	4824      	ldr	r0, [pc, #144]	; (80042f8 <_printf_i+0x23c>)
 8004266:	e7e4      	b.n	8004232 <_printf_i+0x176>
 8004268:	4615      	mov	r5, r2
 800426a:	e7bd      	b.n	80041e8 <_printf_i+0x12c>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	6826      	ldr	r6, [r4, #0]
 8004270:	6961      	ldr	r1, [r4, #20]
 8004272:	1d18      	adds	r0, r3, #4
 8004274:	6028      	str	r0, [r5, #0]
 8004276:	0635      	lsls	r5, r6, #24
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	d501      	bpl.n	8004280 <_printf_i+0x1c4>
 800427c:	6019      	str	r1, [r3, #0]
 800427e:	e002      	b.n	8004286 <_printf_i+0x1ca>
 8004280:	0670      	lsls	r0, r6, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0x1c0>
 8004284:	8019      	strh	r1, [r3, #0]
 8004286:	2300      	movs	r3, #0
 8004288:	6123      	str	r3, [r4, #16]
 800428a:	4615      	mov	r5, r2
 800428c:	e7bc      	b.n	8004208 <_printf_i+0x14c>
 800428e:	682b      	ldr	r3, [r5, #0]
 8004290:	1d1a      	adds	r2, r3, #4
 8004292:	602a      	str	r2, [r5, #0]
 8004294:	681d      	ldr	r5, [r3, #0]
 8004296:	6862      	ldr	r2, [r4, #4]
 8004298:	2100      	movs	r1, #0
 800429a:	4628      	mov	r0, r5
 800429c:	f7fb ffa0 	bl	80001e0 <memchr>
 80042a0:	b108      	cbz	r0, 80042a6 <_printf_i+0x1ea>
 80042a2:	1b40      	subs	r0, r0, r5
 80042a4:	6060      	str	r0, [r4, #4]
 80042a6:	6863      	ldr	r3, [r4, #4]
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	2300      	movs	r3, #0
 80042ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b0:	e7aa      	b.n	8004208 <_printf_i+0x14c>
 80042b2:	6923      	ldr	r3, [r4, #16]
 80042b4:	462a      	mov	r2, r5
 80042b6:	4649      	mov	r1, r9
 80042b8:	4640      	mov	r0, r8
 80042ba:	47d0      	blx	sl
 80042bc:	3001      	adds	r0, #1
 80042be:	d0ad      	beq.n	800421c <_printf_i+0x160>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	079b      	lsls	r3, r3, #30
 80042c4:	d413      	bmi.n	80042ee <_printf_i+0x232>
 80042c6:	68e0      	ldr	r0, [r4, #12]
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	4298      	cmp	r0, r3
 80042cc:	bfb8      	it	lt
 80042ce:	4618      	movlt	r0, r3
 80042d0:	e7a6      	b.n	8004220 <_printf_i+0x164>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4632      	mov	r2, r6
 80042d6:	4649      	mov	r1, r9
 80042d8:	4640      	mov	r0, r8
 80042da:	47d0      	blx	sl
 80042dc:	3001      	adds	r0, #1
 80042de:	d09d      	beq.n	800421c <_printf_i+0x160>
 80042e0:	3501      	adds	r5, #1
 80042e2:	68e3      	ldr	r3, [r4, #12]
 80042e4:	9903      	ldr	r1, [sp, #12]
 80042e6:	1a5b      	subs	r3, r3, r1
 80042e8:	42ab      	cmp	r3, r5
 80042ea:	dcf2      	bgt.n	80042d2 <_printf_i+0x216>
 80042ec:	e7eb      	b.n	80042c6 <_printf_i+0x20a>
 80042ee:	2500      	movs	r5, #0
 80042f0:	f104 0619 	add.w	r6, r4, #25
 80042f4:	e7f5      	b.n	80042e2 <_printf_i+0x226>
 80042f6:	bf00      	nop
 80042f8:	08004441 	.word	0x08004441
 80042fc:	08004452 	.word	0x08004452

08004300 <memmove>:
 8004300:	4288      	cmp	r0, r1
 8004302:	b510      	push	{r4, lr}
 8004304:	eb01 0402 	add.w	r4, r1, r2
 8004308:	d902      	bls.n	8004310 <memmove+0x10>
 800430a:	4284      	cmp	r4, r0
 800430c:	4623      	mov	r3, r4
 800430e:	d807      	bhi.n	8004320 <memmove+0x20>
 8004310:	1e43      	subs	r3, r0, #1
 8004312:	42a1      	cmp	r1, r4
 8004314:	d008      	beq.n	8004328 <memmove+0x28>
 8004316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800431a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800431e:	e7f8      	b.n	8004312 <memmove+0x12>
 8004320:	4402      	add	r2, r0
 8004322:	4601      	mov	r1, r0
 8004324:	428a      	cmp	r2, r1
 8004326:	d100      	bne.n	800432a <memmove+0x2a>
 8004328:	bd10      	pop	{r4, pc}
 800432a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800432e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004332:	e7f7      	b.n	8004324 <memmove+0x24>

08004334 <_sbrk_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4d06      	ldr	r5, [pc, #24]	; (8004350 <_sbrk_r+0x1c>)
 8004338:	2300      	movs	r3, #0
 800433a:	4604      	mov	r4, r0
 800433c:	4608      	mov	r0, r1
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	f7fc fc5e 	bl	8000c00 <_sbrk>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d102      	bne.n	800434e <_sbrk_r+0x1a>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	b103      	cbz	r3, 800434e <_sbrk_r+0x1a>
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	bd38      	pop	{r3, r4, r5, pc}
 8004350:	200002a8 	.word	0x200002a8

08004354 <memcpy>:
 8004354:	440a      	add	r2, r1
 8004356:	4291      	cmp	r1, r2
 8004358:	f100 33ff 	add.w	r3, r0, #4294967295
 800435c:	d100      	bne.n	8004360 <memcpy+0xc>
 800435e:	4770      	bx	lr
 8004360:	b510      	push	{r4, lr}
 8004362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800436a:	4291      	cmp	r1, r2
 800436c:	d1f9      	bne.n	8004362 <memcpy+0xe>
 800436e:	bd10      	pop	{r4, pc}

08004370 <_realloc_r>:
 8004370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004374:	4680      	mov	r8, r0
 8004376:	4614      	mov	r4, r2
 8004378:	460e      	mov	r6, r1
 800437a:	b921      	cbnz	r1, 8004386 <_realloc_r+0x16>
 800437c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004380:	4611      	mov	r1, r2
 8004382:	f7ff bc49 	b.w	8003c18 <_malloc_r>
 8004386:	b92a      	cbnz	r2, 8004394 <_realloc_r+0x24>
 8004388:	f7ff fbda 	bl	8003b40 <_free_r>
 800438c:	4625      	mov	r5, r4
 800438e:	4628      	mov	r0, r5
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004394:	f000 f81b 	bl	80043ce <_malloc_usable_size_r>
 8004398:	4284      	cmp	r4, r0
 800439a:	4607      	mov	r7, r0
 800439c:	d802      	bhi.n	80043a4 <_realloc_r+0x34>
 800439e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043a2:	d812      	bhi.n	80043ca <_realloc_r+0x5a>
 80043a4:	4621      	mov	r1, r4
 80043a6:	4640      	mov	r0, r8
 80043a8:	f7ff fc36 	bl	8003c18 <_malloc_r>
 80043ac:	4605      	mov	r5, r0
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d0ed      	beq.n	800438e <_realloc_r+0x1e>
 80043b2:	42bc      	cmp	r4, r7
 80043b4:	4622      	mov	r2, r4
 80043b6:	4631      	mov	r1, r6
 80043b8:	bf28      	it	cs
 80043ba:	463a      	movcs	r2, r7
 80043bc:	f7ff ffca 	bl	8004354 <memcpy>
 80043c0:	4631      	mov	r1, r6
 80043c2:	4640      	mov	r0, r8
 80043c4:	f7ff fbbc 	bl	8003b40 <_free_r>
 80043c8:	e7e1      	b.n	800438e <_realloc_r+0x1e>
 80043ca:	4635      	mov	r5, r6
 80043cc:	e7df      	b.n	800438e <_realloc_r+0x1e>

080043ce <_malloc_usable_size_r>:
 80043ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d2:	1f18      	subs	r0, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bfbc      	itt	lt
 80043d8:	580b      	ldrlt	r3, [r1, r0]
 80043da:	18c0      	addlt	r0, r0, r3
 80043dc:	4770      	bx	lr
	...

080043e0 <_init>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr

080043ec <_fini>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr
